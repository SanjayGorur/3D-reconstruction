
addpath('../data/contour')
addpath('../data/images')
%% Setup
%It is loaded all the functions and the imagepath
import spacecarving.*;
datadir = fullfile( fileparts( mfilename( 'fullpath' ) ), 'DinosaurData' );
close all;


%% Load the Camera and Image Data
% This reads the "/data/images" directory, loading the camera definitions
% (internal and external calibration) and image file for each camera.
cameras = loadcameradata( datadir );



%% Extracting the Silhoutte
%Afterwards, we extract the silhoutte of each image. The silhoutte is generated by
%reading the contour files and creating a segmented image that everything
%inside of the silhoutte is 1 and everything outside is 0. These information will
%be used on the carving of the voxels.
SI = generate_silhouettes();

for c=1:numel(cameras)
    cameras(c).Silhouette = getsilhouette( c, SI );
end

%% Work out the space occupied by the scene
%In this part, we define a standard volume that the voxels will be placed
%at, in other words, this is the space xyz that the intial voxel structure
%will be placed so it can be carved. Increasing this world we have a
%greater volume coverage but each voxel will be more spread which would
%result in a 3D model with less resolution.
test = 1000;

xlim = [120, 600];
ylim = [120, 550];
zlim = [-100, 550];


%% Create a Voxel Array
% in this part, we create a voxel 3d mapping within those limits defined before.
% the forth argument indicates how many voxels there will be in each
% component xyz, thereby increasing this number reduces the spread between
% each voxel and increases the accuracy of the model. This comes at a cost
% of a increased run time and memory usage.
voxels = makevoxels( xlim, ylim, zlim, 50000 );
starting_volume = numel( voxels.XData );




%% Carving
% Now, using every camera position, we carve the voxels using their
% sillhuete.
for ii=1:numel(cameras)
    voxels = carve( voxels, cameras(ii) );
end
figure('Position',[100 100 600 700]);
showsurface(voxels)
set(gca,'Position',[-0.2 0 1.4 0.95])
axis off
title( '3D Morpheu Reconstruction' )




%% Coloring
%In this part, we color de voxels by extracting information of the images.
figure('Position',[100 100 600 700]);
ptch = showsurface( voxels );
colorsurface( ptch, cameras );
set(gca,'Position',[-0.2 0 1.4 0.95])
axis off
title( '3D Colorful Morpheu Image Reconstruction' )

